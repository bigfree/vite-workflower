[{"/vite/src/main.tsx":"1","/vite/src/App.tsx":"2","/vite/src/store/nameStore.ts":"3","/vite/src/store/helpers/createSelector.ts":"4"},{"size":231,"mtime":1663316264624,"results":"5","hashOfConfig":"6"},{"size":726,"mtime":1663337711351,"results":"7","hashOfConfig":"6"},{"size":1790,"mtime":1663337745073,"results":"8","hashOfConfig":"6"},{"size":548,"mtime":1663317907039,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1xxly85",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/vite/src/main.tsx",[],[],[],"/vite/src/App.tsx",[],[],"/vite/src/store/nameStore.ts",[],[],"/vite/src/store/helpers/createSelector.ts",["23"],[],{"ruleId":"24","severity":1,"message":"25","line":13,"column":23,"nodeType":"26","messageId":"27","endLine":13,"endColumn":26,"suggestions":"28"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["29","30"],{"messageId":"31","fix":"32","desc":"33"},{"messageId":"34","fix":"35","desc":"36"},"suggestUnknown",{"range":"37","text":"38"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"37","text":"39"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[433,436],"unknown","never"]